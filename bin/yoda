#!/usr/bin/python3

###################################################################
#
# FOSS Compliance Utils / yoda
#
# SPDX-FileCopyrightText: 2020 Henrik Sandklef
#
# SPDX-License-Identifier: GPL-3.0-or-later
#
###################################################################


import os.path
import os
import getpass
import sys
import glob
from re import search
import re 
import json
import platform
import argparse
import subprocess
from enum import Enum
import time
from datetime import date
from argparse import RawTextHelpFormatter

#
#
#
PROGRAM_NAME="Yoda (Yocto Dependencies Analyser)"
PROGRAM_NAME_SHORT="yoda"
PROGRAM_DESCRIPTION="yoda compiles license compliance related information from a Yocto build (for later use by yoga and yocr). "
PROGRAM_VERSION="0.1"
PROGRAM_URL="https://github.com/vinland-technology/compliance-utils"
PROGRAM_COPYRIGHT="(c) 2020 Henrik Sandklef<hesa@sandklef.com>"
PROGRAM_LICENSE="GPL-3.0-or-later"
PROGRAM_AUTHOR="Henrik Sandklef"
PROGRAM_SEE_ALSO="yoga (yoda's generic aggregator)\n  yocr (yoga's compliance reporter)\n  flict (FOSS License Compatibility Tool)"
PROGRAM_EXAMPLES=""
PROGRAM_EXAMPLES += "  This tool assumes you're located in Yocto's `build` directory.\n"
PROGRAM_EXAMPLES += "  You need to know the name of the image (e.g. core-image-minimal) you built. \n\n"
PROGRAM_EXAMPLES += "  Find settings for yoda, store in yoda.conf\n"
PROGRAM_EXAMPLES += "    " + PROGRAM_NAME_SHORT + " -i core-image-minimal create-config\n\n"
PROGRAM_EXAMPLES += "  Create a JSON (in compliance-results) file with all packages and image packages (sub packages) for image core-image-minimal\n"
PROGRAM_EXAMPLES += "    " + PROGRAM_NAME_SHORT + " -c yoda.conf list\n\n"
PROGRAM_EXAMPLES += "  Create JSON files (in compliance-results) for all Cairo's \n"
PROGRAM_EXAMPLES += "    " + PROGRAM_NAME_SHORT + " -c yoda.conf -p cairo exportpackagel\n\n"
PROGRAM_EXAMPLES += "  Create JSON files for Cairo's imagepackage cairo-gobject\n"
PROGRAM_EXAMPLES += "    " + PROGRAM_NAME_SHORT + " -c yoda.conf -p cairo -sp cairo-gobject exportpackagel\n\n"


OUTPUT_LICENSE="MIT"
OUTPUT_DIR="./yocr-output"

DEFAULT_IMAGE="core-image-minimal-qemux86-64"
DEFAULT_MACHINE="qemux86-64"
DEFAULT_BUILD_DIRS="tmp/work/core2-64-poky-linux tmp/work/all-poky-linux tmp/work/qemux86_64-poky-linux"
# EXPERIMENTAL below
DEFAULT_META_TOP_DIR="../"
DEFAULT_OUTPUT_FORMAT="JSON"

DATE_FMT='%Y-%m-%d'

LOOKUP_LIBS_FOR_BIN=[ "/usr/lib", "/lib", "/usr/lib/*", "/usr/lib/*/*", "/usr/bin", "/bin", "/usr/libexec", "/usr/libexec/*", "usr/lib/*/*/loaders/" ]

class FileType(Enum):
    DIRECTORY=1,
    SOFT_LINK=2,
    HARD_LINK=3,
    SHELL_SCRIPT=4,
    ELF_PROGRAM=5,
    ELF_LIBRARY=6,
    AR_ARCHIVE=7,
    ASCII_TEXT=8,
    UNICODE_TEXT=9,
    ASCII_TEXT_EXECUTABLE=10,
    GIR=11,
    PYTHON_SCRIPT=12
    HTML=12
    

# map for sub-package => package
# e.g libcario => cairo
SUB_PKG_TO_PACKAGE_MAP={}

# map for subpackages and their path
# e.g. cairo-gobject
#  => ./tmp/work/core2-64-poky-linux/cairo/1.16.0-r0/packages-split/cairo-gobject
SUB_PKG_TO_PATH={}
SUB_PKG_PATH_TO_SUB_PKG={}

PKG_FILES={}
LIB_DEPS={}
GLIBC_EXCLUDES=[]
BIN_PATHS={}
SUB_PKG_TO_LICENSE={}
#PACKAGE_TO_LICENSE={}
MISSING_FILE=10

START_TIME=0
STOP_TIME=0

VERBOSE=False

BUILD_DIRS=[]

def error(msg):
    sys.stderr.write(msg + "\n")

def verbose(msg):
    if VERBOSE:
        sys.stderr.write(msg)
        sys.stderr.write("\n")
        sys.stderr.flush()
        
def error_settings():
    sys.stderr.write("MACHINE:       " + MACHINE + "\n")
    sys.stderr.write("IMAGE:         " + IMAGE + "\n")
    sys.stderr.write("MANIFEST:      " + IMG_MF + "\n")
    sys.stderr.write("DATE:          " + DATE + "\n")
    sys.stderr.write("META_TOP_DIR:  " + META_TOP_DIR + "\n")

def lib_to_regexp(lib):
    return lib.replace('+',"\+")

def build_license_cache():
    global SUB_PKG_TO_LICENSE
    with open(LICENSE_MANIFEST) as f:
        package=None
        for line in f.readlines():
            if line.startswith("PACKAGE NAME:"):
                package=line.split(":")[1].rstrip().replace(" ","")
            if line.startswith("LICENSE:"):
                p_license=line.split(":")[1].rstrip().replace("\n","")
                verbose("cache license: \"" + p_license + "\" for ---->\"" + package + "\"<----")
                SUB_PKG_TO_LICENSE[package]=p_license
    

def build_cache(libc):
    global SUB_PKG_TO_LICENSE
    global PACKAGE_TO_LICENSE
    build_license_cache()
    for dir_ in BUILD_DIRS:
        dir = dir_ + "/*/*/packages-split/"
        verbose(" build cache for: " + dir + "\n")
        for file in glob.glob(dir+"/**/"):
            #print("file: " + file)
            if search ("/src/", file):
                continue
            if  file.endswith("-lic/"):
                #print("discard: " + file)
                continue
            short_file=str(file).replace(dir_+"/", "")
            package=short_file.split(os.sep)[0]
            key = os.path.basename(os.path.normpath(file))
            #verbose("package: " + package + " <=== " + key)
            verbose("store:   " + key + "=> \"" + package + "\" from " + file)
            SUB_PKG_TO_PACKAGE_MAP[key]=package
            SUB_PKG_TO_PATH[key]=file
            SUB_PKG_PATH_TO_SUB_PKG[file]=key
            #verbose("store:   " + key + "=>" + file )
            #PACKAGE_TO_LICENSE[package]=SUB_PKG_TO_LICENSE[]

    if libc:
        global GLIBC_EXCLUDES
        GLIBC_EXCLUDES=[]
    else:
        setup_glibc_excludes()
        
    verbose("glibc excludes: " + str(GLIBC_EXCLUDES))

    return None

# REPLACED BY CACHE
#def sub_pkg_to_package(build_dir, sub_pkg):
#    dir=build_dir + "/*/*/packages-split/"
#    print(" search in: " + dir)
#    for file in glob.glob(dir+"/**/"+sub_pkg, recursive=True):
#        if search ("/src/", file):
#            continue
#        if file.endswith("packages-split/" + sub_pkg):
#            file_name = os.path.basename(file)
#            return file_name
#
#    return None


def sub_package_to_path(sub_pkg):
    for dir_ in BUILD_DIRS:
        if sub_pkg in SUB_PKG_TO_PATH:
            return SUB_PKG_TO_PATH[sub_pkg]
        dir = dir_ + "/*/*/packages-split/"
        sub_pkg_reg_exp=lib_to_regexp(sub_pkg)
        for file_path in glob.glob(dir + sub_pkg_reg_exp, recursive=True):
            if search ("/src/", file_path):
                continue
            #verbose("search: \"" + sub_pkg_reg_exp +"$\"" +  "\"" + file_path + "\"\n")
            if search(sub_pkg_reg_exp+"$", file_path):
                if search("packages-split/*" + sub_pkg_reg_exp + "[ ]*$", file_path):
                    SUB_PKG_TO_PATH[sub_pkg]=file_path
                    return file_path
    return None



def imagepackage_to_sub_package(imagepackage):
    if imagepackage == None:
        return None
    #    print("arty: " + imagepackage)
    for dir in BUILD_DIRS:
        file = dir + "/*/*/*/runtime-reverse/" + imagepackage
        verbose("Looking for sub package using file: " + file)
        for file_path in glob.glob(file, recursive=True):
            if os.path.islink(file_path):
                followed_link = os.readlink(file_path)
                sub_package = os.path.basename(followed_link)
                verbose("  * found: " + sub_package)
                return sub_package

        
def package_license(package):
    for dir in BUILD_DIRS:
        file = dir + "/*/*/" + package + ".spec"
        for file_path in glob.glob(file, recursive=True):
            with open(file_path) as f:
                for line in f.readlines():
                    if "License" in line:
                        return line.split(":")[1].rstrip().replace("\"","").replace("\n","")
    return "unknown"

def image_imagepackages(image_file):
    imagepackages=[]
    if not os.path.isfile(image_file):
        error ("File \"" + image_file + "\" does not exist")
        error_settings()
        exit(MISSING_FILE)
    with open(image_file) as f:
        for line in f.readlines():
            cols = line.split()
            imagepackage = cols[0]
            if not imagepackage.endswith("-lic"):
                imagepackages.append(imagepackage)
    return imagepackages            

def program_info():
    return {
        'name': PROGRAM_NAME,
        'version': PROGRAM_VERSION,
        'url': PROGRAM_URL,
        'copyright': PROGRAM_COPYRIGHT,
        'result-license': OUTPUT_LICENSE
    }

def yocto_info():
    yocto_map= {
        'date': DATE,
        'machine': MACHINE,
        'image': IMAGE,
        'imageManifest': IMG_MF,
        'buildDirs': BUILD_DIRS,
        'metaTopDir': META_TOP_DIR,
    }
    return yocto_map

def today():
    return date.today().strftime(DATE_FMT)

def today_info():
    date_map = {
        'date': today()
    }
    

def producer_info():
    producer_map={}
    producer_map['tool']=program_info()
    producer_map['yocto']=yocto_info()
    producer_map['date']=today_info()
    return producer_map

def flict_info():
    return {
        "software":"flict",
        "version":"0.1"
    }

def host_info():
    uname=os.uname()
    return {
        'os': uname.sysname,
        'osRelease': uname.release,
        'osVersion': uname.version,
        'machine': uname.machine,
        'host': uname.nodename,
        'user': getpass.getuser()
    }

def file_type(file):
    # sneaky way, check suffix
    if file.endswith(".html"):
        return FileType.HTML
    
    command = "/usr/bin/file \"" + file +"\""
    res = subprocess.check_output(command, shell=True)
    result = str(res.decode("utf-8")).replace(file+":", "")

    #verbose("result: " + result)
    if "LSB shared object" in result:
        #verbose("LSB for " + file)
        if "interpreter" in result:
            if ".so" in file:
                # this is typically glibc stuff
                #verbose("LSB for " + file  + " is lib")
                return FileType.ELF_LIBRARY
            else:
                #verbose("LSB for " + file  + " is program")
                return FileType.ELF_PROGRAM
        else:
            #verbose("LSB for " + file  + " is lib")
            return FileType.ELF_LIBRARY
    elif "directory" in result:
        return FileType.DIRECTORY

#
# if a bin (e.g. libpthread.so.0) is NOT a file (but a link?)
#   we need to fall back
#   to checking the link and from that get the file name
#
def find_bin_link_worker_helper(bin_name, search_dir):
    FILES=[]
    #verbose("searching for link in: " + BUILD_DIR + "/*/*/packages-split/*" + search_dir + "/" + bin_name + "*")
    for dir in BUILD_DIRS:
        for f in glob.glob(dir + "/*/*/packages-split/*" + search_dir + "/" + bin_name + "*" , recursive=True):
        #verbose("  found: " + f)
            if os.path.islink(f):
                dirname=os.path.dirname(f)
                #verbose("    found: " + f + " is link")
                #verbose("    found: " + f + " has dir " + dirname)
                #verbose("    reading link")
                bin_file=os.path.join(dirname, os.readlink(f))
                #verbose("    found: " + bin_file + " aint't that kinda sweet")
                #verbose("    reading type of " + bin_file)
                ftype = file_type(bin_file)
                #verbose("    type: " + str(ftype))
                if ftype == FileType.ELF_LIBRARY or ftype == FileType.ELF_PROGRAM: 
                    FILES.append(bin_file)
                else:
                    pass
    return FILES

def find_bin_file_worker_helper(bin_name, search_dir):
    FILES=[]
    #verbose("searching for file in: " + BUILD_DIR + "/*/*/packages-split/*" + search_dir + "/" + bin_name)
    for dir in BUILD_DIRS:
        for f in glob.glob(dir + "/*/*/packages-split/*" + search_dir + "/" + bin_name + "*" , recursive=True):
        #print("f: " +str(f))
            if os.path.isfile(f) and not os.path.islink(f) and not ".debug" in f:
                ftype = file_type(f)
                #print("f: " + str(f) + " " + str(ftype))
                if ftype == FileType.ELF_LIBRARY or ftype == FileType.ELF_PROGRAM: 
                    FILES.append(f)
                else:
                    pass
    return FILES


def find_bin_file_worker(bin_name):
    for dir in LOOKUP_LIBS_FOR_BIN:
        try:
            bin_path = find_bin_file_worker_helper(bin_name, dir)
            if bin_path != None and len(bin_path)!=0:
                return bin_path
        except:
            pass
        try:
            bin_path = find_bin_link_worker_helper(bin_name, dir)
            if bin_path != None and len(bin_path)!=0:
                return bin_path
        except Exception as e:
            verbose(e)
            pass
    verbose("Can not find the path for the binary (link of file): " + bin_name)
    return None

def find_bin_file(bin_name):
    # first, check cache
    if not bin_name in BIN_PATHS:
        bin_paths = find_bin_file_worker(bin_name)
        if bin_paths == None:
            error("No bin paths found for: " + bin_name)
            return None
        if len(bin_paths)!=1:
            error("Not OK size of bin paths (" + str(len(bin_paths)) + ") found for: " + bin_name + ". List: " + str(bin_paths))
            return None
        BIN_PATHS[bin_name]=bin_paths[0]
    else:
        #print("Cached file: " + lib_name)
        pass
    
    return BIN_PATHS[bin_name]

    
def dependencies(elf_file):
    if elf_file not in BIN_PATHS:
        #print("dependencies")
        DEPS=[]
        command = "LD_LIBRARY_PATH=/tmp /usr/bin/readelf -d " + elf_file
        res = subprocess.check_output(command, shell=True)
        result = res.decode("utf-8")
        for line in result.split("\n"):
            if "NEEDED" in line:
                dep_pre = line.split(":")[1]
                dep=dep_pre.replace(" ","").replace("[","").replace("]","")
                #print("cehck dep " + dep)
                #print("check dep " + dep + ": ", end="")
                if len(GLIBC_EXCLUDES) > 0 and dep in GLIBC_EXCLUDES:
                    #print(" PASS (" + str(GLIBC_EXCLUDES) + ")")
                    pass

                else:
                    #print(" USE")
                    #print("KEEP Usin " + dep)
                    #print ("deps: " + dep)
                    DEPS.append(dep)
        BIN_PATHS[elf_file]=DEPS
    return BIN_PATHS[elf_file]

def setup_glibc_excludes():
    global GLIBC_EXCLUDES
    #print("GLIBC GLIBC")
    for dir in BUILD_DIRS:
        for f in glob.glob(dir+"/glibc/*/image/lib/**", recursive=True):
            lib=os.path.basename(f)
            if ".so" in lib:
                GLIBC_EXCLUDES.append(lib)
            
def license_for_sub_pkg(pkg_file, bin_file):
    global SUB_PKG_TO_LICENSE
    #verbose("license_for_pkg(" + pkg_file + ", " + bin_file + ")")
    #verbose(" * manifest: " + LICENSE_MANIFEST)
    # Try getting from cache
    for dir in BUILD_DIRS:
        path=""
        paths=bin_file.replace(dir,"").split("/")
        if len(paths) >= 5:
            path=paths[4]
            if path in SUB_PKG_TO_LICENSE:
                lic=SUB_PKG_TO_LICENSE[path].rstrip().replace("\"","").replace("\n","")
                #verbose(" * cached license:     " + lic + " for " + path)
                return lic

    # Try getting from bb file
    pkg=paths[1]
    verbose(" * lic:     None")
    verbose(" * pkg:     " + pkg)
    verbose(" * mtd:     " + META_TOP_DIR)
    dir=META_TOP_DIR+"/meta*/*/*/"
    verbose(" * dir:     " + dir)
    for bbfile in glob.glob(dir+pkg+"*.bb", recursive=True):
        verbose("bbfile: " + str(bbfile))
        with open(bbfile) as f:
            pn_license=None
            licensel=None
            for line in f.readlines():
                if "LICENSE_${PN}" in line:
                    if "file:" in line: 
                        pass
                    else:
                        pn_license=line.split("=")[1].rstrip().replace("\"","").replace("\n","")
                if "LICENSE" in line:
                    if "file:" in line: 
                        pass
                    else:
                        license=line.split("=")[1].rstrip().replace("\"","").replace("\n","")
            if pn_license != None:
                SUB_PKG_TO_LICENSE[path]=pn_license                
                return pn_license
            if license != None:
                SUB_PKG_TO_LICENSE[path]=license                
                return license
    return "UNKNOWN"

def compile_license_text(package, version):
    #print("compile_license_test: " + str(package) + " " + str(version), file=sys.stderr)
    found_license = False
    license_texts=[]
    for dir in BUILD_DIRS:
        for file in glob.glob(dir + "/" + package + "/*/license-destdir/*/*"):
            if file.endswith("recipeinfo"):
                pass
            #print(" * file: " + str(file), file=sys.stderr)
            found_license = True
            
            license_text={}
            license_text['name']=file
            license_text['text']=None
            #print("read: " + str(file))
            with open (file, "r", encoding='utf-8',
                 errors='ignore') as fp:
                data=fp.readlines()
                license_text['text']=data
            license_texts.append(license_text)
            #print("license_text....: " + str(len(license_texts)), file=sys.stderr)
        if found_license:
            break
    
    #print("license_text....: " + str(len(license_texts)), file=sys.stderr)
    return license_texts


def package_file_to_exportpackage(pkg_file, indent):
    #verbose(indent + pkg_file + " <----------------")
    bin_file=find_bin_file(pkg_file)
    if bin_file == None:
        return failed_exportpackage(pkg_file, "Failed to find binary file for " + pkg_file)
    deps=dependencies(bin_file)
    deps_deps=[]
    for dep in deps:
        dep_exportpackage = package_file_to_exportpackage(dep, indent+"  ")
        deps_deps.append(dep_exportpackage)
    exportpackage={}
    exportpackage['file']=pkg_file
    sub_pkg=sub_package_for_bin_file(bin_file)
    exportpackage['subPackage']=sub_pkg
    package=SUB_PKG_TO_PACKAGE_MAP[sub_pkg]
    exportpackage['package']=package
    sub_pkg_path = sub_package_to_path(sub_pkg)
    exportpackage['version']=sub_pkg_to_version_short(package, sub_pkg_path, sub_pkg)
    exportpackage['license']=license_for_sub_pkg(pkg_file, bin_file)
    exportpackage['dependencies']=deps_deps
    return exportpackage

def short_name_for_sub_pkg_path(sub_pkg_path):
    if not sub_pkg_path in SUB_PKG_PATH_TO_SUB_PKG:
        SUB_PKG_PATH_TO_SUB_PKG[sub_pkg_path]=str(os.path.basename(sub_pkg_path.rstrip('/')))
    return SUB_PKG_PATH_TO_SUB_PKG[sub_pkg_path]
    
def package_for_bin_file(bin_file):
    bin_file_ret=bin_file
    for dir in BUILD_DIRS:
        bin_file_ret = bin_file_ret.replace(dir, "")
    return bin_file_ret.split("/")[1]

def sub_package_for_bin_file(bin_file):
    bin_file_ret=bin_file
    for dir in BUILD_DIRS:
        bin_file_ret = bin_file_ret.replace(dir, "")
    return bin_file_ret.split("/")[4]

def path_for_sub_pkg(sub_pkg):
    if not sub_pkg in SUB_PKG_TO_PATH:
        SUB_PKG_TO_PATH[sub_pkg]=str(os.path.basename(sub_pkg_path.rstrip('/')))
    return SUB_PKG_TO_PATH[sub_pkg]
    
def files_for_sub_pkg(sub_pkg_short):
    sub_pkg_path=path_for_sub_pkg(sub_pkg_short)
    if not sub_pkg_short in PKG_FILES:
        # TODO: add excludes
        FILES=[]
        
        #verbose("Looking recursively in: " + sub_pkg_path)
        for f in glob.glob(sub_pkg_path+"/**", recursive=True):
            #print(" * : " + f)
            if os.path.isfile(f) and not os.path.islink(f):
                #verbose("   * store: " + f + "\n")
                FILES.append(f)
            #else:
            #    print("   * throw away")
        PKG_FILES[sub_pkg_short]=FILES
    return PKG_FILES[sub_pkg_short]

def exportpackage_to_map(exportpackage):
    exportpackage_map = {}
    exportpackage_map['producer']=producer_info()
    exportpackage_map['flict-meta']=flict_info()
    exportpackage_map['valid']=True
    exportpackage_map['exportpackage']=exportpackage
    return exportpackage_map

def failed_exportpackages(sub_pkg, msg):
    exportpackage={}
    if msg == None:
        msg=""
    exportpackage['valid']=False
    exportpackage['cause']=msg
    return exportpackage

def failed_exportpackage(name, msg):
    exportpackage={}
    
    exportpackage['package']=name
    exportpackage['subPackage']=name
    exportpackage['valid']=False
    if msg == None:
        msg=""
    exportpackage['cause']=msg
    return exportpackage


def failed_package_to_exportpackage(package, msg):
    exportpackage={}
    if msg == None:
        msg=""
    exportpackage['file']=package
    #exportpackage['package']=package
    exportpackage['license']="unknown"
    exportpackage['depencencies']="unknown"
    exportpackage['valid']=False
    exportpackage['cause']=msg
    return exportpackage

def sub_package_to_exportpackage_helper(sub_pkg):
    # e.g
    # package=cairo
    # sub_pkg=cairo-gobject
    #verbose("imagepackage_to_exportpackage_helper " + str(sub_pkg))

    sub_pkg_path = sub_package_to_path(sub_pkg)
    if sub_pkg_path is None:
        error("Failed to find sub-package-path for: " + sub_pkg)
        exportpackages=[]
        exportpackages.append(failed_package_to_exportpackage(sub_pkg, None))
        return exportpackages

    # Get short name of lib (possibly cached)
    #sub_pkg_short=short_name_for_sub_pkg_path(sub_pkg_path)
    #verbose("sub_pkg_short: " + sub_pkg_short)
    
    # Get files for sub_pkg
    sub_pkg_files=files_for_sub_pkg(sub_pkg)
    
    files=[]
    exportpackages=[]
    for f in sub_pkg_files:
        ftype = file_type(f)
        if ftype == FileType.ELF_PROGRAM or ftype == FileType.ELF_LIBRARY:
            #verbose("  package_file_to_exportpackage: " + str(ftype))
            try:
                exportpackage = package_file_to_exportpackage(os.path.basename(f), "  ")
#                exportpackage_map = exportpackage_to_map(exportpackage)
                #verbose("helper: " + str(exportpackage_map))
                exportpackages.append(exportpackage)
            except Exception as e:
                exportpackage = failed_package_to_exportpackage(os.path.basename(f), "failed producing exportpackage.")
                exportpackages.append(exportpackage)
                error("Failed building exportpackage structure for: " + str(f))
                error(e)
        else:
            verbose("Ignoring file since not a lib or program: " + str(f))
            exportpackage = failed_package_to_exportpackage(os.path.basename(f), "Ignoring file since not a lib or program: " + str(f))
            exportpackages.append(exportpackage)
            #verbose("ignore exportpackage: " + str(exportpackage))

    return exportpackages


def package_to_exportpackage(package, sub_pkg):
    # e.g
    # package=cairo
    # sub_pkg=cairo-gobject (None)

#    print("sub_pkg: " + str(sub_pkg))
    sub_pkgs=[]
    if sub_pkg != None:
        sub_pkgs = sub_pkg.split(":")
    else:
        for dir_ in BUILD_DIRS:
            dir = dir_ + "/" + package + "/*/packages-split/*"
            for f in glob.glob(dir, recursive=False):
                if "shlibdeps" in f or package+"-staticdev" in f or package+"-dev" in f or package+"-dbg" in f or package+"-lic" in f or package+"-src" in f:
                    pass
                else:
                    sub_pkgs.append(os.path.basename(f))

    exportpackages_map={}
    exportpackage_files=[]
    version=None
    for sp in sub_pkgs:
        try:
            exportpackage_files.extend(sub_package_to_exportpackage_helper(sp))
            if version == None:
                sub_pkg_path = sub_package_to_path(sp)
                version=sub_pkg_to_version_short(package, sub_pkg_path, sp)
        except Exception as e:
            error("Could not create exportpackage from: " + str(sp))
            error(e)
    exportpackages_map['package']=package
    exportpackages_map['version']=version
    exportpackages_map['license']=package_license(package)
    exportpackages_map['license_text']=package_license(package)
    exportpackages_map['packageFiles']=exportpackage_files
    exportpackages_map['license_texts']=compile_license_text(package, version)

    
    return exportpackages_map

def imagepackage_to_exportpackage(imagepackage):
    sub_pkg = imagepackage_to_sub_package(imagepackage)
    if sub_pkg == None:
        error("Failed to find sub-package for: " + str(imagepackage))
        return None

    exportpackages_map={}
    exportpackages_map['package']=package
    exportpackages_map['exportpackages']=sub_package_to_exportpackage_helper(sub_pkg)
    return exportpackages_map
    

def print_imagepackages_as_txt(imagepackages):
    for key in imagepackages:
        if key=='imagepackages':
            continue
        print()
        print(str(key))
        print("---------------------------")
        items={}
        items = imagepackages[key]
        for subkey in items:
            print("  " + str(subkey) + "=\"" + str(items[subkey])+"\"")
    print()
    print("imagepackages")
    print("===========================")
    for imagepackage in imagepackages['imagepackages']:
        if 'valid' not in imagepackage or imagepackage['valid']=="true":
            print()
            print("  " + str(imagepackage['name']))
            print("  ---------------------------")
            print("    package:           \"" + str(imagepackage['package']) + "\"")
            print("    version:           \"" + str(imagepackage['packageVersion']) + "\"")
            print("    version dir:       \"" + str(imagepackage['packageVersionDir']) + "\"")
            print("    sub package:       \"" + str(imagepackage['subPackage']) + "\"")
            print("    sub package path:  \"" + str(imagepackage['subPackagePath']) + "\"")
        else:
            print()
            print("  " + str(imagepackage['name']))
            print("  ---------------------------")
            print("    invalid:            " + str(imagepackage['cause']))


def sub_pkg_to_version(package, sub_pkg_path, sub_pkg):
    ret=sub_pkg_path
    for dir in BUILD_DIRS:
        ret = ret.replace(dir, "")
    return ret.replace("packages-split/" + sub_pkg, "").replace(package,"").replace("/","")

def sub_pkg_to_version_short(package, sub_pkg_path, sub_pkg):
    return re.sub(r"-r[0-9]","", sub_pkg_to_version(package, sub_pkg_path, sub_pkg))

def image_to_licensemap(image_file):
    imagepackages = image_license_packages(image_file)
    for imagepackage in imagepackages:
        print(" * " + str(imagepackage))

def _find_machine(conf):
    for line in conf.readlines():
        if "MACHINE" in line:
            if line.startswith("#") or "SDKMACHINE" in line :
                pass
            else:
                return line.split("=")[1].replace("\"","").strip()

def _find_date(image_name, machine):
    dates=[]
    for file in glob.glob("tmp/deploy/licenses/*"):
        #print("file: " + str(file))
        # Make sure dir contains machine and image_name
        if search(machine, (str(file))) and search(image_name, (str(file))):
            # cut out date part
            split_file = file.split("-")
            dates.append(split_file[len(split_file)-1])
            #print("use: " + str(file))
        else:
            #print("skip: " + str(file))
            pass
            
            
    if len(dates)==0:
        return None
    elif len(dates)==1:
        return dates[0]
    else:
        dates.sort()
        dates.reverse()
        print("Several dates available: " + str(dates), file=sys.stderr, end="")
        print(", using: \"" + str(dates[0]) + "\"", file=sys.stderr)
        return dates[0]
        
def _find_mtd():
    files = glob.glob("../*")
    if len(files) > 0:
        return "../"
    files = glob.glob("../sources/*")
    if len(files) > 0:
        return "../sources/"

    return None

def _find_dd(base_dir):
    files = glob.glob(base_dir + "/*")
    machine = platform.machine() + "-linux"
    dirs = []
    for file in files:
        if search(machine, file):
            #print("ignore: file: \"" + str(file) + "\"")
            pass
        else:
            #print("use file: \"" + str(file) + "\"")
            dirs.append(file)
            
    return dirs

def find_settings(image_name, create_config=False):

    with open("conf/local.conf") as f:
        machine = _find_machine(f)
    if machine == None:
        error("Failed identifying machine")
        exit(1)
        
    date = _find_date(image_name, machine)
    if date == None:
        error("Date not found. Is the supplied image (" + image_name + ") correct?")
        exit(1)

    mtd = _find_mtd()
    if mtd == None:
        error("No meta directory found. Sorry :(")
        exit(1)

    dd = _find_dd("tmp/work")
    if dd == None:
        error("No build directories found. Sorry :(")
        exit(1)

    verbose("file: " + f.name)
    verbose(" * date:     " + str(date))
    verbose(" * dd:       " + str(dd))
    verbose(" * machine:  " + str(machine))
    verbose(" * mtd:      " + str(mtd))
    
    dirs = ""
    for d in dd:
        dirs += " " + d

    if create_config:
        if os.path.isfile("yoda.conf"):
            error("yoda.conf already exists. You need to manually remove it and rerun")
            exit(4)
        else:
             f = open("yoda.conf", "w")
             f.write("########################################################\n")
             f.write("# \n")
             f.write("# Auto generated configuration file for yoda\n")
             f.write("# \n")
             f.write("########################################################\n")
             f.write("# date \n")
             f.write("DATE=" + date + "\n\n")
             f.write("# image \n")
             f.write("IMAGE=" + image_name + "\n\n")
             f.write("# machine \n")
             f.write("MACHINE=" + machine + "\n\n")
             f.write("# Meta top dir \n")
             f.write("MTD=" + mtd + "\n\n")
             f.write("# Build dirs \n")
             f.write("BUILD_DIRS=\"" + dirs + "\"\n\n")
             f.close()
        pass
    else:
        command_line = ""
        command_line += " -d "   + date
        command_line += " -mtd " + mtd
        command_line += " -m "   + machine
        command_line += " -bd "  + dirs 
        command_line += " -i "   + image_name


        print("Suggested arguments:")
        print(command_line)
            
        
def image_to_imagepackages(image_file):
    imagepackages_map = {}
    imagepackages_map['imagepackages']=[]
    imagepackages_map['meta']=program_info()
    imagepackages_map['producer-info']=producer_info()
    
    imagepackages = image_imagepackages(image_file)
    for imagepackage in imagepackages:
        #verbose(".")
        sub_pkg = imagepackage_to_sub_package(imagepackage)
        if sub_pkg == None:
            error("Failed to find sub-package for: " + imagepackage)
            imagepackages_map['imagepackages'].append({
                'imagepackage': imagepackage,
                'valid': "false",
                'cause': "Can't find sub-package for abstract package " + imagepackage
            })
            continue
        sub_pkg_path = sub_package_to_path(sub_pkg)
        #        package = sub_pkg_to_package(BUILD_DIR, sub_pkg)
        if sub_pkg_path is None:
            error("Failed to find sub-package-path for: " + imagepackage + " " + sub_pkg)
            continue
        if sub_pkg in SUB_PKG_TO_PACKAGE_MAP:
            package = SUB_PKG_TO_PACKAGE_MAP[sub_pkg]
            #            package_version_dir=str(sub_pkg_path).replace(BUILD_DIR, "").replace("packages-split/" + sub_pkg, "").replace(package,"").replace("/","")
            package_version_dir=sub_pkg_to_version(package, sub_pkg_path, sub_pkg)
#            package_version=re.sub(r"-r[0-9]","",package_version_dir)
            package_version=sub_pkg_to_version_short(package, sub_pkg_path, sub_pkg)
            #verbose("package_version: " + package_version_dir + "  ===>  " + package_version + "\n")
            #verbose("arg 1: " + BUILD_DIR + "\n")
            #verbose("arg 2: " + sub_pkg + "\n")
            verbose("-----------------------------------------package to store: " + package + " from " + sub_pkg)
            imagepackages_map['imagepackages'].append({
                'imagepackage': imagepackage,
                'package': package,
                'valid': "true",
                'packageVersion': package_version,
                'packageVersionDir': package_version_dir,
                'subPackage': sub_pkg,
                'subPackagePath': sub_pkg_path
            })

    return imagepackages_map

def parse():

    description = "NAME\n  " + PROGRAM_NAME + "\n\n"
    description = description + "DESCRIPTION\n  " + PROGRAM_DESCRIPTION + "\n\n"
    
    epilog = ""
    epilog = epilog + "EXAMPLES\n\n" + PROGRAM_EXAMPLES + "\n\n"
    epilog = epilog + "AUTHOR\n  " + PROGRAM_AUTHOR + "\n\n"
    epilog = epilog + "REPORTING BUGS\n  File a ticket at " + PROGRAM_URL + "\n\n"
    epilog = epilog + "COPYRIGHT\n  Copyright " + PROGRAM_COPYRIGHT + ".\n  License " + PROGRAM_LICENSE + "\n\n"
    epilog = epilog + "SEE ALSO\n  " + PROGRAM_SEE_ALSO + "\n\n"
    
    parser = argparse.ArgumentParser(
        description=description,
        epilog=epilog,
        formatter_class=RawTextHelpFormatter
    )
    parser.add_argument('mode', type=str,
                        help='list, exportpackage, find, create-config', default='list')

    parser.add_argument('-v', '--verbose',
                            action='store_true',
                            help='output verbose information to stderr',
                            default=False)
    parser.add_argument('-f', '--format',
                            type=str,
                            help='output result in specified format, default is ' + DEFAULT_OUTPUT_FORMAT,
                            default=DEFAULT_OUTPUT_FORMAT)
    parser.add_argument('-lf', '--list-formats',
                            action='store_true',
                            dest='listformats',
                            help='list supported formats',
                            default=False)
    parser.add_argument('-m', '--machine',
                            type=str,
                            help='machine of Yocto build, default is ' + DEFAULT_MACHINE,
                            default=DEFAULT_MACHINE)

    parser.add_argument('-c', '--config',
                        type=str,
                        dest='config',
                        help='Use settings from configuration file',
                        default=None)

    parser.add_argument('-bd', '--build-directories',
                        dest='builddirs',
                        type=str,
                        nargs="+",
                        help='distribution directories, default is ' + str(DEFAULT_BUILD_DIRS),
                        default=DEFAULT_BUILD_DIRS)
    parser.add_argument('-i', '--image',
                            type=str,
                            help='image, default is ' + DEFAULT_IMAGE,
                            default=DEFAULT_IMAGE)
    parser.add_argument('-d', '--date',
                            type=str,
                            help='date of build')
    parser.add_argument('-mtd', '--meta-top-dir',
                            type=str,
                            dest='meta_top_dir',
                            help='directory containing for meta directories, default is ' + DEFAULT_META_TOP_DIR,
                            default=DEFAULT_META_TOP_DIR)
    parser.add_argument('-ip', '--imagepackage',
                            type=str,
                            dest='managed_imagepackage',
                            help='imagepackage to handle')
    parser.add_argument('-ia', '--imagepackages-packages',
                            action='store_true',
                            dest='imagepackage_packages',
                            help='handle all packages as found via imagepackage list')
    parser.add_argument('-p', '--package',
                            type=str,
                            dest='managed_package',
                            help='packge to handle')
    parser.add_argument('-sps', '--sub-packages',
                            type=str,
                            dest='managed_sub_packages',
                            help='sub packages (requires package) to handle')
    parser.add_argument('-ic', '--include-libc',
                            dest='includelibc',
                            action='store_true',
                            help="include glibc libraries as dependencies",
                            default=False)

    args = parser.parse_args()

    global VERBOSE
    VERBOSE=args.verbose

    if args.listformats:
        print("Supported output formats: JSON and txt")
        exit(0)

    global MACHINE
    MACHINE=str(args.machine)

    global IMAGE
    IMAGE=str(args.image)

    global META_TOP_DIR
    META_TOP_DIR=str(args.meta_top_dir)
    
    global DATE
    DATE=str(args.date)

    global BUILD_DIRS
    BUILD_DIRS=args.builddirs
    
    return args


def read_config(config_file):
    #print("here..." + config_file)
    with open(config_file) as f:
        for line in f.readlines():
            #print(" line: " + line)
            if line.startswith("#"):
                pass
            elif "=" in line:
                trimmed_line = line.strip().replace("\"", "")
                var = trimmed_line.split("=")[0]
                val = trimmed_line.split("=")[1]
                if var == "META_TOP_DIR":
                    global META_TOP_DIR
                    META_TOP_DIR = val
                elif var == "MACHINE":
                    global MACHINE
                    MACHINE = val
                elif var == "IMAGE":
                    global IMAGE
                    IMAGE = val
                elif var == "DATE":
                    global DATE
                    DATE = val
                elif var == "BUILD_DIRS":
                    global BUILD_DIRS
                    list = []
                    for i in val.strip().split(" "):
                        list.append(i)
                    BUILD_DIRS = list

    

def main():
    args = parse()
    if args.mode == "find":
        find_settings(args.image)
        exit(0)
    if args.mode == "create-config":
        find_settings(args.image, True)
        exit(0)

    if args.config:
        read_config(args.config)

    global DATE
    global IMAGE
    global MACHINE
        
    global IMG_MF
    IMG_MF="tmp/deploy/images/" + MACHINE + "/" + IMAGE + "-" + MACHINE + ".manifest"

    global LICENSE_MANIFEST
    LICENSE_MANIFEST="tmp/deploy/licenses/" + IMAGE + "-" + MACHINE + "-" + DATE + "/license.manifest"

    verbose("DATE:             " + DATE)
    verbose("BUILD_DIRS:       " + str(BUILD_DIRS))
    verbose("IMAGE:            " + IMAGE)
    verbose("MACHINE:          " + MACHINE)
    verbose("META_TOP_DIR:     " + META_TOP_DIR)
    verbose("LICENSE_MANIFEST: " + LICENSE_MANIFEST)
    verbose("IMG_MF:           " + IMG_MF)

    build_cache(args.includelibc)

    verbose("verbose: " + str(args.verbose) + "\n")
    verbose("mode:    " + str(args.mode) + "\n")
    if args.mode=="list":
        verbose("format: " + str(args.format) + "\n")
        map = image_to_imagepackages(IMG_MF)
        if args.format=='JSON':
            print(json.dumps(map))
        elif args.format=='txt':
            print_imagepackages_as_txt(map)
    elif args.mode=="exportpackage":
        if args.imagepackage_packages:
            verbose("Getting list of imagepackages")
            map = image_to_imagepackages(IMG_MF)
            verbose("Looping over the list of imagepackages")
            imagepackages = map['imagepackages']
            imagepackages_list=[]
            for imagepackage in imagepackages:
                verbose("Handling imagepackage: " + str(imagepackage['name']))
                imagepackage_map={}
                imagepackage_map['imagepackage']=imagepackage
                if 'valid' not in imagepackage or imagepackage['valid']=="true":
                    package=imagepackage['package']
                    sub_package=imagepackage['subPackage']
                    exportpackages_map=package_to_exportpackage(package, sub_package)
                    imagepackage_map['exportpackages']=exportpackages_map['exportpackages']
                else:
                    imagepackage_map['exportpackages']={}
                    #print("---leave  " + str(imagepackage['name']))
                imagepackages_list.append([imagepackage_map])

                continue
            imagepackages_map={}
            #imagepackages_map['meta']=program_info()
            imagepackages_map['meta_information']=producer_info()
            imagepackages_map['imagepackages']=imagepackages_list
            
            print(json.dumps(imagepackages_map))
        elif args.managed_package != None:
            if args.format=='JSON':
                exportpackages_map=package_to_exportpackage(args.managed_package, args.managed_sub_packages)
                print(json.dumps(exportpackages_map))

        else:
            if args.format=='JSON':
                exportpackages_map=imagepackage_to_exportpackage(args.managed_imagepackage)
                print(json.dumps(exportpackages_map))
    else:
        error("Missing or incorrect mode")
        exit(110)
        
if __name__ == '__main__':
    main()
